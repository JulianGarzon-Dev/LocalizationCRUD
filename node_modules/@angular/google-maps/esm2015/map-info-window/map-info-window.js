/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/// <reference types="googlemaps" />
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// Workaround for: https://github.com/bazelbuild/rules_nodejs/issues/1265
/// <reference types="googlemaps" />
import { Directive, ElementRef, EventEmitter, Input, Output, } from '@angular/core';
import { BehaviorSubject, combineLatest, Subject } from 'rxjs';
import { map, takeUntil } from 'rxjs/operators';
import { GoogleMap } from '../google-map/google-map';
/**
 * Angular component that renders a Google Maps info window via the Google Maps JavaScript API.
 * @see developers.google.com/maps/documentation/javascript/reference/info-window
 */
export class MapInfoWindow {
    /**
     * @param {?} _googleMap
     * @param {?} _elementRef
     */
    constructor(_googleMap, _elementRef) {
        this._googleMap = _googleMap;
        this._elementRef = _elementRef;
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.closeclick
         */
        this.closeclick = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/info-window
         * #InfoWindow.content_changed
         */
        this.contentChanged = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.domready
         */
        this.domready = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/info-window
         * #InfoWindow.position_changed
         */
        this.positionChanged = new EventEmitter();
        /**
         * See
         * developers.google.com/maps/documentation/javascript/reference/info-window
         * #InfoWindow.zindex_changed
         */
        this.zindexChanged = new EventEmitter();
        this._options = new BehaviorSubject({});
        this._position = new BehaviorSubject(undefined);
        this._listeners = [];
        this._destroy = new Subject();
    }
    /**
     * @param {?} options
     * @return {?}
     */
    set options(options) {
        this._options.next(options || {});
    }
    /**
     * @param {?} position
     * @return {?}
     */
    set position(position) {
        this._position.next(position);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._combineOptions().pipe(takeUntil(this._destroy)).subscribe((/**
         * @param {?} options
         * @return {?}
         */
        options => {
            if (this._infoWindow) {
                this._infoWindow.setOptions(options);
            }
            else {
                this._infoWindow = new google.maps.InfoWindow(options);
                this._initializeEventHandlers();
            }
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._destroy.next();
        this._destroy.complete();
        for (let listener of this._listeners) {
            listener.remove();
        }
        this.close();
    }
    /**
     * See developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.close
     * @return {?}
     */
    close() {
        if (this._infoWindow) {
            this._infoWindow.close();
        }
    }
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.getContent
     * @return {?}
     */
    getContent() {
        return (/** @type {?} */ (this._infoWindow)).getContent();
    }
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/info-window
     * #InfoWindow.getPosition
     * @return {?}
     */
    getPosition() {
        return (/** @type {?} */ (this._infoWindow)).getPosition() || null;
    }
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.getZIndex
     * @return {?}
     */
    getZIndex() {
        return (/** @type {?} */ (this._infoWindow)).getZIndex();
    }
    /**
     * Opens the MapInfoWindow using the provided MapMarker as the anchor. If the anchor is not set,
     * then the position property of the options input is used instead.
     * @param {?=} anchor
     * @return {?}
     */
    open(anchor) {
        /** @type {?} */
        const marker = anchor ? anchor._marker : undefined;
        if (this._googleMap._googleMap) {
            this._elementRef.nativeElement.style.display = '';
            (/** @type {?} */ (this._infoWindow)).open(this._googleMap._googleMap, marker);
        }
    }
    /**
     * @private
     * @return {?}
     */
    _combineOptions() {
        return combineLatest([this._options, this._position]).pipe(map((/**
         * @param {?} __0
         * @return {?}
         */
        ([options, position]) => {
            /** @type {?} */
            const combinedOptions = Object.assign(Object.assign({}, options), { position: position || options.position, content: this._elementRef.nativeElement });
            return combinedOptions;
        })));
    }
    /**
     * @private
     * @return {?}
     */
    _initializeEventHandlers() {
        /** @type {?} */
        const eventHandlers = new Map([
            ['closeclick', this.closeclick],
            ['content_changed', this.contentChanged],
            ['domready', this.domready],
            ['position_changed', this.positionChanged],
            ['zindex_changed', this.zindexChanged],
        ]);
        eventHandlers.forEach((/**
         * @param {?} eventHandler
         * @param {?} name
         * @return {?}
         */
        (eventHandler, name) => {
            if (eventHandler.observers.length > 0) {
                this._listeners.push((/** @type {?} */ (this._infoWindow)).addListener(name, (/**
                 * @return {?}
                 */
                () => {
                    eventHandler.emit();
                })));
            }
        }));
    }
}
MapInfoWindow.decorators = [
    { type: Directive, args: [{
                selector: 'map-info-window',
                host: { 'style': 'display: none' },
            },] }
];
/** @nocollapse */
MapInfoWindow.ctorParameters = () => [
    { type: GoogleMap },
    { type: ElementRef }
];
MapInfoWindow.propDecorators = {
    options: [{ type: Input }],
    position: [{ type: Input }],
    closeclick: [{ type: Output }],
    contentChanged: [{ type: Output }],
    domready: [{ type: Output }],
    positionChanged: [{ type: Output }],
    zindexChanged: [{ type: Output }]
};
if (false) {
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.closeclick
     * @type {?}
     */
    MapInfoWindow.prototype.closeclick;
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/info-window
     * #InfoWindow.content_changed
     * @type {?}
     */
    MapInfoWindow.prototype.contentChanged;
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.domready
     * @type {?}
     */
    MapInfoWindow.prototype.domready;
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/info-window
     * #InfoWindow.position_changed
     * @type {?}
     */
    MapInfoWindow.prototype.positionChanged;
    /**
     * See
     * developers.google.com/maps/documentation/javascript/reference/info-window
     * #InfoWindow.zindex_changed
     * @type {?}
     */
    MapInfoWindow.prototype.zindexChanged;
    /**
     * @type {?}
     * @private
     */
    MapInfoWindow.prototype._options;
    /**
     * @type {?}
     * @private
     */
    MapInfoWindow.prototype._position;
    /**
     * @type {?}
     * @private
     */
    MapInfoWindow.prototype._listeners;
    /**
     * @type {?}
     * @private
     */
    MapInfoWindow.prototype._destroy;
    /**
     * @type {?}
     * @private
     */
    MapInfoWindow.prototype._infoWindow;
    /**
     * @type {?}
     * @private
     */
    MapInfoWindow.prototype._googleMap;
    /**
     * @type {?}
     * @private
     */
    MapInfoWindow.prototype._elementRef;
}
//# sourceMappingURL=data:application/json;base64,